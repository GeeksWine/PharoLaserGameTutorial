! Using Versionner

When you save several packages you would like to be able to reload package versions that work together. In addition, you want to make sure that the dependencies between packages are well defined. For example, it does not make sense to load LaserGame-Tests without LaserGame-Model. We say that LaserGame-Tests depends on LaserGame-Model. Pharo uses Metacello (explained in depth in Deep into Pharo *http://www.deepintopharo.org*) to manage dependencies within and between projects. The key concept with Metacello is the notion of ''configuration of'' a project. Indeed, the convention is that we define these dependencies in a class called ''ConfigurationOfLaserGame''.

The tool ''Versionner'' helps us define the configuration we want. This allows us to save a the development structure (package structure and dependencies), and from there release and commit specific versions of your packages. Lets see that in action for our project.


!!! First Steps: Adding and Naming a New Configuration

- Open World menu > Tools > Versionner.

- Press the New Project button. Name the new project 'LaserGame'. You should get a window similar to that shown by Figure *EmptyConfig*.

+An empty configuration.>file://figures/5-EmptyConfig.pdf|width=50|label=EmptyConfig+



!!! Adding Packages
Now we will list the packages that should be managed by the configuration.

- In the ''Versions'' list on the left, select the ''development'' item.
- In the ''Packages'' pane press the 'Add package' button, which displays a filtered list of packages.
- Pick the package LaserGame-Model, and 'Ok'.
- Repeat and add the package LaserGame-Tests.

You should now have two packages in the ''Packages'' list.

!!! Declaring Package Dependencies

Now we are ready to declare package dependencies: we want to express that the Tests depend on the Model. 

+Ready to add required package.>file://figures/5-ToAddDependent.pdf|width=60|label=ToAddDependent+

- Select the LaserGame-Tests package and edit its requirements by clicking on the 'Edit package requirements' button (the pen icon in Figure *ToAddDependent*). 
- Press the '\+' button and choose LaserGame-Model.

You have just defined that the LaserGame-Model package is required to be loaded prior to LaserGame-Tests.  You can observe this by expanding the ''Packages'' list, to get a system similar to the one shown in Figure *WithDependent*.

+With Dependent Package.>file://figures/5-WithDependent.pdf|width=60|label=WithDependent+

!!! Save to Development

The Metacello convention is 

The button 'Save to Development' is meant to be used each time you change the structure of your project i.e. if you add a package or add or change a dependency. Loading a development version of a Configuration into an image means that the latest version of packages found in the project repository will be loaded. This is not our end goal, but for now we use it to first save the structure of our project.  

- Press the button 'Save to development'. Pay attention that the configuration is not yet committed to your remote repository. The configuration is only staged inside the Pharo image. You can observe this with System Browser showing the newly created ''ConfigurationOfLaserGame'' class.  

!!! Adding a Repository and Committing
Now we should be able to save a development configuration. We just need to add the repository of our project (as shown in Figure *WithRepo*).

- Under the ''Packages'' list is an little cylinder icon 'Add new repository to this project'. Click this.

- Scroll down to your LaserGame project (e.g. similar to LaserGame/StephaneDucasse). 

+With our repository.>file://figures/5-WithRepo.pdf|width=60|label=WithRepo+

Now we can push the configuration to that remote repository. 

- Press the button 'Commit the project'. It will bring a new window showing the changes your did. It should look similar to Figure *commited*. 
- Enter a commit message
- Ensure the Remote is your remote repository (e.g. similar to LaserGame/StephaneDucasse). Note the 'DIR' refers to your local package cache.
- Press the 'Ok' Button and your configuration will be saved (currently only the development one). 

We now have saved to a remote server the first configuration defining the packages and dependencies of our project. 

+With our repository.>file://figures/5-commited.pdf|width=60|label=commited+

!!! Releasing a version

Now at some point you will want to commit release versions of your projects. This is done as follows:

- Press the button 'Release version' and specify the version number according to your needs. (You might consider semantic versioning http://semver.org). 
- Leave 'Resolve symbolic dependencies' selected in most cases.  This ensures your configuration always loads the exact same package versions. If your configuration refers to a symbolic name like #stable, then your specific release version would load version dependencies as #stable progressed for them.
- Click 'Ok' and the configuration is updated with a new milestone, comprising the two specific versions currently loaded in the image for our two packages. 

Pay attention once again that this release configuration is defined only in the image, and not yet saved in a repository.

@@todo BTC-2014-06-09 I got an alert "Question - There are unsaved changes to the development version. Ok to loose these changes?"  Well, no I don't want to loose them, but after I click <No> what is the next step?? Should I check Monticello? Should the packages be save first so that they are clean? Or do I just need to do a 'Save to development'?

- Again push the project to the remote repository by pressing the button 'Commit the project'. You should obtain a configuration state as shown in Figure *Released*. You should see that the package list now also shows you the exact version of the packages.

+The project now has a stable version and a development one.>file://figures/5-Released.pdf|width=60|label=Released+


Each time you commit a configuration, the system produces a log of the commit for you as shown in Figure *logConfirmation*.
+A Configuration Commit Log.>file://figures/5-logConfirmation.pdf|width=60|label=logConfirmation+


!!! Ready to Continue

Now each time you want to save your work you can either:
- Select the ''development'' item and commit it, or
- Select 'Release version' and commit it. 




