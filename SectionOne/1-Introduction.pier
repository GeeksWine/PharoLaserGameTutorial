! Introduction

This book is an adaptation for Pharo of the tutorial written originally by Stephan Wessels for Squeak and available at http://squeak.preeminent.org/tut2007/. 

Stéphane Ducasse adapted this tutorial to Pharo (3.0). Here is a list of changes:
- Added Pharo installation instructions (see appendix)  
- The flow of the tutorial has been adapted from place to place.
- New material and more explanation has been added such as design discussions, use of refactorings...
- Less screenshots have been used to avoid the obsolescence when the IDE will change.
- All the code has been typed and shown in the text because different outputs may place pictures in different places. 
@@note BTC: I don’t understand the point above. (and btw can the notes be made to stand out more)
- Figures are now cross referenced.
- Topics on package management and coding in the debugger have been added.
- All the code has been adapted to Pharo and is available from SmalltalkHub in the LaserGame project under StephaneDucasse account ( ==http://smalltalkhub.com/#!/~StephaneDucasse/LaserGame== ).

Many tutorials showcase just the technology, by presenting the shortest (unrealistic) development path to the final product. This tutorial takes anote nother path, documenting the warts and all development of a project from first concept through to deployment. Each step is described in detail, including (especially) when mistakes were made.

The aim here is to show how natural it is to start from a rough concept, then iterate over the design, refactoring the implementation with the confidence that comes from test driven development. This tutorial demonstrates not only how to program Pharo, but an effective way to evolve an application over time, which provides Pharo its agility for fast application development.

Stéphane really wants to thank Steven for his gift to the Pharo and Smalltalk community.

!! Conventions used in this book

A large part of this tutorial provides sample code and discussion of that code. Within the narrative, references to a class name or method name will look like ""==MyClass=="" and ""==myMethod=="" respectively. To efficiently specify which class a method belongs to we write ""==MyClass>>myMethod=="".

Blocks of sample code are displayed as follows:

[[[
MyClass>>myMethod
	^ 1 + 2.
]]]

Note the class name prefix and ">>" are not typed into the code pane. This is a documentation convention only. So the above sample code when entered into the system would look like this:

[[[
myMethod
	^ 1 + 2.
]]]

The carat "^" is the return symbol, here indicating a value of 3 is returned by the method. Note if there is no return symbol, self is returned by default.

@@note BTC-2014-05-24 The carat symbol "^" seems to have been Squeakified. How to fix?


!! License
This book is available as a free download from: *http://laserGame.pharo.org*
Copyright 2007 by Steven Wessels. Copyright 2014 Steven Wessels and Stéphane Ducasse.

The contents of this book are protected under Creative Commons Attribution-ShareAlike 3.0 Unported license.

''You are free:''

- to Share: to copy, distribute and transmit the work
- to Remix: to adapt the work

''Under the following conditions:''
- Attribution. You must attribute the work in the manner specified by the author or licensor (but not in any way that suggests that they endorse you or your use of the work).
- Share Alike. If you alter, transform, or build upon this work, you may distribute the resulting work only under the same, similar or a compatible license.


For any reuse or distribution, you must make clear to others the license terms of this work. The best way to do this is with a link to this web page: *http://creativecommons.org/licenses/by-sa/3.0/*
- Any of the above conditions can be waived if you get permission from the copyright holder.
- Nothing in this license impairs or restricts the author's moral rights.

+Book License>file://figures/CreativeCommons-BY-SA.png|width=30|label=Commons+





