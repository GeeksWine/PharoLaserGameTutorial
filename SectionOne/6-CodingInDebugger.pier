! Coding in the debugger

Certain agile developers like to define tests first, let the test fail, then define the required supporting methods from within the debugger. Why? Because inside the debugger you can access ''live'' objects in the context of the executing program. You get to progressively execute the code you write against the live objects. You can save code and continue execution. We now want to show you how that is done, to code in the debugger. 


!! Setting up the context
So let us start.

@@dothis Temporarily redefine the methods ==isOn== and ==isOff== as follows

[[[
BlankCell>>isOff
	"dummy definition"
	^ self halt.
]]]


[[[
BlankCell>>isOn
	"dummy definition"
	^ self halt.
]]]


The ==self halt== is normally used as a breakpoint to open a debugger when it is executed. Here we are using it just to produce an error that we can use to show how to hot fix it on the run.

+Getting the preview debugger.>file://figures/5-HaltPreview.pdf|width=60|label=HaltPreview+

+Getting the stack debugger.>file://figures/5-HaltDebugger.pdf|width=60|label=HaltDebugger+

!! Coding in the debugger

- Execute the test ==testCellStateShouldBeOff==, which brings up the preview debugger as shown in Figure *HaltPreview*. 

- Press the 'Debug' button to get the full debugger shown in Figure *HaltDebugger*. Navigate the stack and find the method raising the error, usually near the top of the list. In this case the method ==inOff== has the ==halt== message highlighted.

%% BTC-2014-06-14 This note doesn't seem to fit the context. %% @@note  Sending a message to an object that does not have that method defined will raise an error "Message Not Understood" and bring up a debugger.  

@@dothis Now directly in the debugger we restore the method ==isOff== back to its previous code, shown below. 

[[[
BlankCell>>isOff	^ self isOn not
]]]

-After saving and compiling the ==isOff== method (using 'Accept' or cmd-s) you will see Figure *RecompiledOne* which shows the ==isOn== message highlighted as the position that execution will resume from.


+Editing the method ==isOff== directly in the debugger.>file://figures/6-Recompiled.pdf|width=60|label=RecompiledOne+

- Now pressing the button 'Proceed' sends the ==isOn== message, and the ==halt== in the ==isOn== method is encountered.  

@@dothis Click 'Debug' in the preview debugger (similar to Figure *HaltPreview*) and restore ==isOn== back to what it was previously, as shown here and in Figure *RecompileSecond*

[[[
BlankCell>>isOn	^ self activeSegments values anySatisfy: [ :each | each ]
]]]


+Now we can redefine the other method.>file://figures/6-RecompileSecond.pdf|width=60|label=RecompileSecond+



- Press 'Proceed' and you will see that TestRunner shows a green result.


!! Conclusion
We will not repeat this process further in the tutorial but we use it daily in our development.
We can only encourage you to try this great way of developing software.

@@todo BTC-2014-06-14 I think this example would be clearer using a real error like "1/0" rather than "halt".  Also, better to not remove the original code to make less re-typing.  Just precede existing code with a "1/0".  Let me know if you agree and I'll update it.  Its a fairly isolated section that does't affect subsequent chapters.  

@@todo  BTC-2014-06-14 btw fixing  a "1/0" error and proceeding doesn't end up with a green TestRunner.  Is that expected?