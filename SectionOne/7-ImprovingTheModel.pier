! Improving our Model

Now that we saved our previous version with green tests, we can add new behavior to our model.
We will do it test first. 


!! Adding a new method

We want to add a new method named ==isSegmentOnFor:== which will tell us whether a segment for a giving direction is on. Let us define first a simple test named ==testIsSegmentOn== defined as follow.

[[[
BlankCellTest>>testIsSegmentOn
	| cell |
	cell := BlankCell new.
	self deny: (cell isSegmentOnFor: #north).
]]]

Note that the message will be displayed with a different indicating that the messsage does not already exist in the system. Proceed and compile the method. Pharo will prompt you, so confirm that you are defining a new method.

Then execute the new test, and open the debugger, you should get a debugger as the one shown in Figure *IsSegmentOne*. The debugger shows you that the message ==isSegmentOn:== not understood by the receiver. 


+Debugger opened for a message not understood.>file://figures/7-isSegmentOnOne.pdf|width=50|label=IsSegmentOne+

Click on the 'Create' button, you will get prompt to know on which class you want to define the method ==isSegmentOn:==. Pick ==BlankCell== as shown in Figure *IsSegmentOnTwo*.

+Selecting the class to create the new method>file://figures/7-isSegmentOnTwo.pdf|width=50|label=IsSegmentOnTwo+

You should get now a debugger on the method automatically created by the debugger as shown in Figure *IsSegmentOnThree*.

+An automatically created method>file://figures/7-isSegmentOnTwo.pdf|width=50|label=IsSegmentOnThree+


Now we can define inside the debugger the method ==isSegmentOnFor:==. 

[[[
BlankCell>>isSegmentOnFor: aSymbol
	^ self activeSegments at: aSymbol
]]]

And when we press proceed, the test is run. 

!!! Defining another test

Now we can define a test testing all the directions.

[[[
BlankCellTest>>testNewCellDoesNotHaveSegmentOn
	| cell |
	cell := BlankCell new.
	self deny: (cell isSegmentOnFor: #north).
	self deny: (cell isSegmentOnFor: #south).
	self deny: (cell isSegmentOnFor: #west).
	self deny: (cell isSegmentOnFor: #east).
]]]

Execute the tests to verify that everything is working. Your three tests should be green.
It is a good occasion to save your code.


!! Handling Beam Exist Path

We've written methods to check the state of individual segments within our cell. Now we also need methods to answer the output direction for a given laser beam input direction. The ==BlankCell== class needs another instance variable that will encode the path of a beam: i.e., for an input direction provides an output direction.

[[[
Object subclass: #BlankCell
	instanceVariableNames: 'activeSegments exitSides'
	classVariableNames: ''
	category: 'LaserGame-Model'

]]]

As before, create accessors and we will define another initialization method to define the beam path in a cell. But let us write first a test method.

[[[
BlankCellTest>>testCellExit
	| cell |
	cell := BlankCell new.
	self assert: (cell exitFor:  #north) = #south.
	self assert: (cell exitFor:  #south) = #north.
	self assert: (cell exitFor:  #west) = #east.
	self assert: (cell exitFor:  #east) = #west.
]]]	

Now define the method  ==initializeExitSides== to initialize the path.

[[[
BlankCell>>initializeExitSides

	self exitSides: Dictionary new.
	self exitSides at: #north put: #south.
	self exitSides at: #south put: #north.
	self exitSides at: #east put: #west.
	self exitSides at: #west put: #east.
]]]

And modify the ==initialize== method to call it. 

[[[
BlankCell>>initialize

	super initialize.
	self initializeActiveSegments.
	self initializeExitSides
]]]

Now we can define the method ==exitFor:== which given a direction returns the exit that the laser beam will follow.

[[[
BlankCell>>exitFor: aSymbol

    ^ self exitSides at: aSymbol
]]]

Run your tests and once they are green this is a good occasion to commit your work.


!! Beam Entering Side

Another behavior we need, is to tell the cell that the laser beam has entered the cell. We will need to specify which side the laser beam entered by. Then our new test should check that the expected line segments in the cell are lit-up when the method completes. Just add the test in the test case class. We already know the new method ==laserEntersFrom:== does not exist yet.


[[[
BlankCellTest>>testLaserEntersNorthShouldLitUpSouth
	| cell |
	cell := BlankCell new.
	cell laserEntersFrom: #north.
	self assert: ( cell isOn ).
	self assert: (cell isSegmentOnFor: #north).
	self assert: (cell isSegmentOnFor: #south).
	self deny: (cell isSegmentOnFor: #west).
	self deny: (cell isSegmentOnFor: #east).
]]]


Execute the test and it should failed as expected. Now define the method ==laserEntersFrom:== in the class ==BlankCell==.

[[[
BlankCell>>laserEntersFrom: aSymbolDirection

    | exit |
    self activeSegments at: aSymbolDirection put: true.
    exit := self exitSideFor: aSymbol.
	self activeSegments at: exit put: true.
]]]


Run your tests. They should all be green. 


Note that we could provide methods to set or toggle the state of a direction, instead of exposing the fact that 
we manipulate a dictionary. It could be ==setOnSegmentFor:== and ==setOffSegmentFor:==. 

[[[
BlankCell>>setSegmentOnFor: aSymbolDirection
    self activeSegments at: aSymbolDirection put: true

BlankCell>>setOffSegmentOffFor: aSymbolDirection
    self activeSegments at: aSymbolDirection put: false


BlankCell>>laserEntersFrom: aSymbolDirection

    self setSegmentOnFor: aSymbolDirection.
	self setSegmentOnFor: (self exitFor: aSymbol)
]]]


Add a new test to cover ==setOnSegmentFor:== and ==setOffSegmentFor:==. For example a good test is the following one.

[[[
BlankCellTest>>testSetSegment
	| cell |
	cell := BlankCell new.
	self deny: (cell isSegmentOnFor: #north).
	cell setSegmentOnFor: #north.
	self assert: (cell isSegmentOnFor: #north).
	cell setSegmentOffFor: #north.
	self deny: (cell isSegmentOnFor: #north).
]]]

Run your tests. They should all be green. 









!! A Discussion About Directions

The design we proposed to you use symbols to represent direction. It is ok now there are still some place for improvements that you could do. Carrying around symbol in all the code is prone to errors. Imagine that you mistype west as vest then your system will not work well anymore. 
A way to improve is to define class methods (==north==, ==south==, ==west==, ==east==) on the class ==Cell== and to use them in place of symbol. We could also use class variables or a pool dictionary to hold such values (Read the model chapter of Pharo by Example to know more). 

A good acid test is that we can replace the symbol ==\#north== in the method ==north== by a number such as 0 and the system should continue to work. 

Another way to improve could be to represent direction as real objects. We let you experiment with such design. 

