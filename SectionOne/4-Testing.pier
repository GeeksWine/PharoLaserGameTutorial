! Test Driven Development

% http://squeak.preeminent.org/tut2007/html/011.html

We will use the SUnit unit testing framework to implement the game model (have a look at the Pharo by Example SUnit Chapter for a deeper discussion). More than likely we'll not concern ourselves with writing unit tests for the actual behavior of the GUI because it is tedious. But there's plenty we can accomplish by unit test driving our development of the game model.

We are not too attached to how we code the very first few lines of code. An approach we've seen used by many people is to begin with the Unit Tests, even to the point of not having any objects to test before the first test is written. Another approach is to implement some basic model and then drive from that point forward using Unit Tests.

Now what is important to understand is that Unit tests accomplish several things:

- They help us to develop our objects because creating tests to exercise an object's api makes us consider how our objects will be used.
- They provide a consistency check as we continue to add and evolve code. This helps us to quickly identify when and where we break existing code, which is a tremendous help to stay on track.

Good unit tests capture your requirements and help you as you implement design. Often, when you write a unit test you are forced to think about your design as if it were finished.

!! Unit Test the Initial Model

% http://squeak.preeminent.org/tut2007/html/015A.html

The ""==BlankCell=="" is an excellent place to begin writing our unit tests. We want a new package to hold our test classes, which in turn will hold the methods defining our test cases.  By convention the test classes will have "Test" appended to the name of the class being tested. So we'll define a new package ''LaserGame-Tests'' and inside it a new class ""==BlankCellTest=="".

@@dothis Right-click on the packages list and choose "Add package…", type the package name "LaserGame-Tests" and click "OK".  

The newly created package is automatically selected, and a class definition template displayed in the code-pane at the bottom of the System Browser.  

@@dothis Edit the class definition template as follows, then right-click and choose "Accept it". This causes the class definition to be compiled, creating a subclass of ""==TestCase=="" named ""==BlankCellTest=="" in the running image.

[[[
TestCase subclass: #BlankCellTest
	instanceVariableNames: ''
	classVariableNames: ''
	category: 'LaserGame-Tests'
]]]

@@note Pay attention to the class definition for your new ""==BlankCellTest=="". It must be a subclass of the class ""==TestCase=="". This is easy to overlook. If you did it wrong already, no problem, just go back and correct it now and then save (accept) the code again.

Within a class, methods are organised into "protocols" that are shown in the third browser pane from the left of Figure *testCellStateShouldBeOffEmpty*.  We will group our "tests" inside a protocol of the same name. 

+An empty test method>file://figures/3-testCellStateShouldBeOff-Empty.pdf|width=60|label=testCellStateShouldBeOffEmpty+

@@dothis Ensure that class ""==BlankCellTest=="" is selected then right-click the protocol list, choose "Add protocol…" from the menu. Type "tests" and click "OK".

@@note Be sure that your browser is showing "instance" methods when you add this new method protocol and further methods - because the methods we define for now will correspond to messages sent to instances and not their classes.  This is done by observing the "Class side" check-box (beneath the second browser pane) is unselected, as shown in Figure *testCellStateShouldBeOffEmpty*. 

@@note BTC-2014-05-24 The selected class BlankCellTestCase in Figure *testCellStateShouldBeOffEmpty* doesn't match BlankCellTest used in the narrative.

@@dothis Select the protocol named ""==tests=="". 

A method template is displayed in the "code pane" at the bottom of the browser. Our first test will be a simple check to see if the cell is "off" or "on" by default. We expect it to be "off" and should test for that. Just to start simple, we'll create a method with an empty body. 

@@dothis Clear the method template and type just the method name ""==testCellStateShouldBeOff=="",  then "Accept it". 

The browser should now look like Figure *testCellStateShouldBeOffEmpty*. Now if no protocol was selected when you created the method it would be placed in a special protocol named 'as yet unclassified'. If that occurs, just drag the method from the method list onto the ""==tests=="" protocol. 


@@dothis Update method ""==testCellStateShouldBeOff=="" as follows, which results in Figure *testCellStateShouldBeOffFull*.)

+Fully defined test method.>file://figures/3-testCellStateShouldBeOff-Full.pdf|width=60|label=testCellStateShouldBeOffFull+

[[[
BlankCellTest>>testCellStateShouldBeOff
	| cell |
	cell := BlankCell new.
	self assert: cell isOff.
	self deny: cell isOn
]]]


@@note To efficiently select a piece of text just, place the cursor before the beginning or after the end of the text then click again, and the complete text is selected. 


Before we run this test we need simple dummy definitions of methods ""==isOn=="" and ""==isOff=="" - so the methods exist before they are used by the test. (However later you will see how you don't necessarily need to define methods before they are used, they can be created "on the fly".) For now, we do the following the steps:

@@dothis Select the class ""==BlankCell=="" in the LaserGame-Model package.

@@dothis Add a protocol named 'testing' to class ""==BlankCell=="", and ensure this protocol is selected.

@@dothis Replace the method template with the following code for ""==isOff=="", bring up the context menu and "Accept it" (or use shortcut command-S). 

[[[
BlankCellTest>>isOff
	"dummy definition"
	^ false.
]]]

Observe that while you are typing, the top right corner of the code pane is tinged with orange, indicating that the edit of the method has not been compiled. Once you compile the method with "Accept it", the orange tinge goes away.   

@@note Each time you modify the code of an existing method and you "Accept It", the named method will be replaced by the new code. 

@@note An efficient way of creating methods with similar code is to just change the method name in the code pane, and "Accept it".


@@dothis Proceed with defining the following similar method ""==isOn=="". 



[[[
BlankCell>>isOn
	"dummy definition"
	^ false.
]]]





!! Run Our First Unit Test

% http://squeak.preeminent.org/tut2007/html/018.html

Even though we know the ""==isOn=="" and ""==isOff=="" methods are wrong (since we hard-coded both to answer ""==false=="") we should run the ""==testCellStateShouldBeOff=="" test. Enough code has been written already that we want to be sure that ""==BlankCell=="" objects are created correctly and the test produces the "wrong" result we are expecting. Lets do that now.

@@note BTC-2015-05-21 Rather than give two ways to do this, we mention just one we a demonstrating.  I moved the mention of the second to later.  Also, note I'm just using the "dothis" Pharo icons for code changes, and not here.

- Open the Test Runner from the world Menu.
- Filter the listed packages by typing 'Laser' in the top left input field as shown in Figure *TestRunnerYellow*.
- Select the package LaserGame-Tests.
- Select the class ""==BlankCellTest=="".
- Press the button 'Run Selected', and you should get the situation shown in Figure *TestRunnerYellow*.

+Running a test that does not pass.>file://figures/4-TestRunnerYellow.pdf|width=60|label=TestRunnerYellow+

@@note If you do not see ''LaserGame-Tests'' in the list pane of the Test Runner, you probably made a mistake creating the test case class. The class ""==BlankCellTest=="" must be a subclass of ""==TestCase=="". You may want to go back and check your work.


!!! Getting to the Error

% http://squeak.preeminent.org/tut2007/html/019.html

In the yellow pane Test Runner shows "1 failure". Beneath that the failing test methods are listed. We can open a debugger to investigate where the problem comes as follows:

- In Test Runner, click once on the failed test.  A Debugger Preview window opens displaying the call stack as shown in Figure *DebuggerPreview*. 

+The Debugger preview.>file://figures/4-DebuggerPreview.pdf|width=60|label=DebuggerPreview+

+Navigating the stack of the debugger.>file://figures/5-DebuggerStack.pdf|width=60|label=DebuggerStack+

- Click the ''Debug'' button and select the test method named ""==testCellStateShouldBeOff=="" from the call-stack to see where it actually failed. You should see something like Figure *DebuggerStack*.

@@note BTC-2014-05-24 The activeSegments instance variable in Figure *DebuggerStack* has not been created yet.  Can probably just edit the bitmap to fix.

When we navigate the stack (by clicking on different lines in the top pane), the variables listed down below change. We can inspect objects held by these variables by choosing ''Inspect it'' from their context menu. You can also select any part of the code to evaluate and inspect. Figure *DebuggerInspector* shows the Inspector that appeared after selecting the text "cell" and from its context menu, choosing to ''Inspect it''. Later we will show that we can also change the method definition and proceed on the fly.

+You can inspect arguments or receiver. Here the cell is ok.>file://figures/5-DebuggerInspector.pdf|width=60|label=DebuggerInspector+



That looks great. Okay. Let's go back and make our model pass the tests. Close the debugger and inspector we opened. You can leave the Test Runner open for later. Go back to the class browser.


!! An alternative way to run tests

In Pharo there are two ways to execute tests. You've seen one already, using Test Runner.  The other is from the System Browser. Next to each method and class is a small circle icon that indicates the success/failure status of the last test run.  Clicking on the icon next to a method runs just that test, while clicking on one next to a class runs all the tests for that class.  For now, we will continue to use Test Runner.


!! Saving a Milestone on SmalltalkHub

Saving packages is a nice way to be able to reload your work in another image and to go back in the past of your project. We show you now how to proceed. We suggest you to create an account on SmalltalkHub (*http://www.smalltalkhub.com*) then create a project to save your version of this tutorial. 

Assuming you've signed up and created a "LaserGame" project similar to that shown in Figure *SmalltalkHub*, we can illustrate the process of saving to that project repository. 

+Defining a project on SmalltalkHub>file://figures/3-Smalltalkhub.pdf|width=60|label=SmalltalkHub+

- Open the Monticello Browser from the World menu,
- On the left, select the LaserGame-Model package.
- Press the '\+Repository' button to add the location of your SmalltalkHub project.
- Choose an HTTP repository.
- Paste your "Monticello registration" information from SmalltalkHub (similar to that highlighted in Figure *SmalltalkHub*) 
- Click the 'Open' button to check the repository opens without error, though it is likely empty.
- Repeat the same steps for the 'LaserGame-Tests' package.
 
We added the following repository to both our packages, but yours will differ slightly.

[[[
MCHttpRepository
	location: 'http://smalltalkhub.com/mc/StephaneDucasse/LaserGame/main'
	user: 'mylogin'
	password: 'mysecret'
]]]

You should get a situation similar to the one depicted by Figure *MCDirty*. Note that the star appearing in front of your packages means that there are changes in the system that have not been saved in the code repository. Dirty packages are sorted to the top of the list. 

+Defining a project on SmalltalkHub>file://figures/3-MCDirty.pdf|width=60|label=MCDirty+

+Monticello Browser with saved packages>file://figures/3-MCSaved.pdf|width=60|label=MCSaved+

+Monticello packages saved in the SmalltalHub repository>file://figures/4-RepositorySaved.png|width=60|label=RepositorySaved+

- Select one of the dirty packages and press the 'Save' button. Fill out the form with some useful information (e.g. 'first version with dummy testing methods'), after which you will observe the start is removed from the package, which is now resorted down with the rest of the clean packages. You should get the situation in the Monticello browser as depicted by Figure *MCSaved*. 

- Scroll back up to the other dirty package and save that also.  You can reuse the previous log message by clicking 'Old log messages'. 

- Now ''Refresh'' your SmalltalkHub repository (or open it again) and you should see something like Figure *RepositorySaved*.



@@note We like to save code with green tests. This way we can load the code and continue from a stable milestone. We suggest you to do the same. We will indicate possible saving points in the course of this tutorial. 



Now we are ready to refine our methods to make our tests passed.








! Getting our first test to pass

% http://squeak.preeminent.org/tut2007/html/016.html

Remember our first test ""==testCellStateShouldBeOff=="" which was defined as:

[[[
BlankCellTest>>testCellStateShouldBeOff
	| cell |
	cell := BlankCell new.
	self assert: cell isOff.
	self deny: cell isOn
]]]

Of course we know this will fail before we even run it because we haven't fully defined either the ""==isOff=="" or ""==isOn=="" instance methods. Following on from the LED clock analogy presented earlier, to know if a cell is "on" we need to examine its four internal line segments. If any of the four internal segments are lit-up then the cell can be thought of as ''on''.

However, before we can finish our ""==isOn=="" or ""==isOff=="" methods we need to define the line segments on our class. We need an instance variable to hold the active segments, using a dictionary to store pair directions and their associated values.

@@dothis In the ''LaserGame-Model'' package, select the ""==BlankCell=="" class. Edit the class definition to add the instance variable  ""==activeSegments=="" and then 'Accept it'.  

[[[
Object subclass: #BlankCell
	instanceVariableNames: 'activeSegments'
	classVariableNames: ''
	category: 'LaserGame-Model'
]]]

This modifies the class definition such that, as well as newly created ""==BlankCell=="" objects having that instance variable, any existing ""==BlankCell=="" objects within Pharo's live environment will also have the instance variable added to them.   

@@note BTC-2014-05-30 The follow text is just a distraction here. There should be opportunity to demonstrate this soon. Fit it in somewhere later... "Note that we do not have to define an instance variable this way, we could simply type a method using it and compile the method, at that time the system will prompt us to know how to declare the variable (either as an instance variable or a local variable)." 

We will then use Pharo's built-in refactoring tools to create accessors for this new instance variable. 

@@dothis Select the ""==BlankCell=="" class. From its context menu select Refactoring > Inst Var Refactoring > Accessors. 

@@dothis From the instance variable list, select ""==activeSegments=="". 

@@dothis Review the list of proposed changes, then 'Accept' them. 

This will automatically create the following methods categorized in the 'accessing' protocol as shown in Figure *WithAccessors*.

+Accessors are now created and sorted in the 'accessing' protocol.>file://figures/4-WithAccessors.pdf|width=60|label=WithAccessors+

@@note BTC-2014-05-30 The (C) icon next to BlankCell in Figure *WithAccessors* indicates its been commented already. Was that done yet?

[[[
BlankCell>>activeSegments
	^ activeSegments
]]]

[[[
BlankCell>>activeSegments: anObject
	activeSegments := anObject
]]]

@@dothis Now since we will store a Dictionary object inside the ""==activeSegments=="" variable we will rename its argument of its setter from anObject to aDictionary.  Note this is just for convenience as a form of documentation.  It does not affect compilation or operation of code.

[[[
BlankCell>>activeSegments: aDictionary
	activeSegments := aDictionary
]]]

@@note Creating accessors is not mandatory, especially for private state, so that instance variables can be only accessed directly from within the methods of the class. Different schools propose different practices with different pros and cons. We created here to provide uniformity during the complete book. 




!! Initializing Instances

% http://squeak.preeminent.org/tut2007/html/017.html

We need to initialize the new ""==activeSegments=="" variable. Let us proceed.

@@dothis Add a protocol 'initialize' to the ""==BlankCell=="" class.
@@dothis Define the following new instance method named ""==initializeActiveSegments=="". The default condition for these should all be false therefore it should look like the following one:

[[[
BlankCell>>initializeActiveSegments

	self activeSegments: Dictionary new.
	self activeSegments at: #north put: false.
	self activeSegments at: #south put: false.
	self activeSegments at: #west put: false.
	self activeSegments at: #east put: false.
]]]

The method ""==initializeActiveSegments=="" needs to be activated appropriately. There are several ways to do so: (1) specialize the default ""==initialize=="" method or (2) use a lazy initialization. Let's implement and explain the first approach. 

@@dothis Define the method ""==initialize=="" as follows to send the message ""==initializeSegments=="" we previously defined.

[[[
BlankCell>>initialize

	super initialize.
	self initializeActiveSegments
]]]

@@note In Pharo, when we create a new instance by sending the message ""==new=="" to a class, the newly created instance receives the message ""==initialize=="". Therefore we get a chance to customize the default initialization.


The first thing we do in our ""==initialize=="" method is to call ""==super initialize=="". This is a good practice to remember. Since we are implementing an ""==initialize=="" method on our new class it is conceivable that we are overriding an important ""==initialize=="" operation somewhere in our superclass hierarchy. By calling ""==super initialize=="" we give the superclasses in our hierarchy the opportunity to complete their initialization steps first.

!!! Alternate Approach: Lazy Initialization.

Another approach is to use lazy-initialization, which initialises the variable the first time it is used. We first need check whether the variable has already been initialized (uninitialized instance variables points to ""==nil=="") so that we don't do this twice.  Usually this is done in one location in the getter method, to be called by other methods of the class instead of them accessing the instance variable directly.

The getter method would be redefined as follows:

[[[
BlankCell>>activeSegments
	^ activeSegments ifNil: [ self initializeActiveSegments ]
]]]

Lazy initialization is useful in a live programming environment where new instance variables are added to existing objects.  The ""==initialize=="" method of those objects would already been run once, and running it again would be awkward.  Also, when systematically initializing an instance at creation takes too much time, lazy initialization delays initialization until the the moment where it is really necessary.  This effectively trades creation time with a little extra cost (the ""==ifNil:=="" check) for each access to the variable.  The effectiveness of either approach is influence by application, which would be determined by performance profiling.


!! Getting our Test Green

% http://squeak.preeminent.org/tut2007/html/020.html (top part only, bottom part in 7-ImprovingTheModel.pier)

@@dothis We redefine the method ""==isOn=="" as follows: 

[[[
BlankCell>>isOn

	^ self activeSegments values anySatisfy: [ :each | each = true ]
]]]

Here ""==activeSegment=="" returns the dictionary whose ""==values==" are booleans indicating which segments are on, ""==anySatisfy=="" returns true as soon as one element is true. Now since ""==each==" will hold booleans, you could equivalently write:

[[[
BlankCell>>isOn

	^ self activeSegments values anySatisfy: [ :each | each ]
]]]

@@dothis Once the method ""==isOn=="" is defined, ""==isOff=="" naturally follows as: 

[[[
BlankCell>>isOff

	^ self isOn not
]]]

Now if you rerun the test, it passes as shown by Figure *GreenTest*.

+Verifying that our definitions are correct by checking our first test.>file://figures/5-GreenTests.pdf|width=60|label=GreenTest+


!!! Adding a class comment

It is not a good practice to leave our classes undocumented.  The Browser  alerts this condition as shown by the exclamation mark against a class. 
- Ensure the ""==BLankCell=="" class is selected.
- Press the ''Comment'' button.
- Add a comment like the following one for example:

[[[
An empty cell. A beam entering the west will exit east and the same in reverse. A beam entering the south will exit north and same in reverse.
]]]

- Accept the contents. The red exclamation mark should be gone.


!! Save your packages
Now that our tests are green we suggest to save a new configuration of our project following the process explained in the following chapter.

@@note BTC-2014-05-30 Might be better to leave Versioneer to later on, when they've got something graphical to share.



